# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd  # Pandas modülünü ekleyin.
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.model_selection import KFold
from PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap
from imblearn.over_sampling import SMOTE
from PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import os
from PyQt5.QtWidgets import QMessageBox
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QByteArray
from io import BytesIO
from imblearn.under_sampling import RandomUnderSampler
from PyQt5.QtCore import Qt




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1329, 728)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(820, 230, 111, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 320, 151, 31))
        self.label_9.setObjectName("label_9")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(20, 410, 131, 31))
        self.pushButton_13.setObjectName("pushButton_13")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(170, 70, 113, 22))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1010, 230, 431, 21))
        self.label_4.setObjectName("label_4")
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(390, 260, 93, 28))
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 230, 55, 16))
        self.label_7.setObjectName("label_7")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(580, 320, 891, 261))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(350, 340, 171, 121))
        self.label_12.setObjectName("label_12")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(170, 270, 113, 22))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 180, 111, 16))
        self.label_6.setObjectName("label_6")
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(670, 230, 111, 22))
        self.comboBox_4.setObjectName("comboBox_4")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(820, 130, 101, 28))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1010, 180, 441, 21))
        self.label_3.setObjectName("label_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 30, 81, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 80, 71, 16))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(170, 20, 113, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(30, 450, 241, 181))
        self.label_11.setObjectName("label_11")
        self.comboBox_6 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_6.setGeometry(QtCore.QRect(670, 180, 111, 22))
        self.comboBox_6.setObjectName("comboBox_6")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(680, 70, 61, 31))
        self.spinBox.setObjectName("spinBox")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(360, 30, 211, 191))
        self.label_10.setObjectName("label_10")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(170, 360, 113, 22))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(10, 360, 141, 16))
        self.label_14.setObjectName("label_14")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(1010, 120, 451, 31))
        self.label_13.setObjectName("label_13")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(170, 320, 113, 22))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(170, 120, 113, 22))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(820, 70, 91, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(170, 220, 113, 22))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(170, 170, 113, 22))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(820, 180, 111, 31))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 530, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(10, 280, 55, 16))
        self.label_8.setObjectName("label_8")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(710, 0, 231, 51))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 130, 101, 21))
        self.label_5.setObjectName("label_5")
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(670, 130, 111, 22))
        self.comboBox_5.setObjectName("comboBox_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1329, 27))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.pushButton_9.clicked.connect(self.generate_nan_values)

        self.pushButton_14.clicked.connect(self.apply_kfold)

        self.comboBox_5.addItem("İleri Doldurma")
        self.comboBox_5.addItem("Geri Doldurma")
        self.comboBox_5.addItem("Ortalama ile Doldurma")
        self.comboBox_5.addItem("Silme ile Doldurma")

        self.comboBox_6.addItem("Min-Max Normalizasyonu")
        self.comboBox_6.addItem("Z-Score Normalizasyonu")

        # comboBox_4 için seçenekler ekleyin
        self.comboBox_4.addItem("KNN")
        self.comboBox_4.addItem("Random Forest")
        self.comboBox_4.addItem("Karar Ağacı")

         # pushButton_7 olayını bağlayın
        self.pushButton_7.clicked.connect(self.apply_model)

         # pushButton_7 olayını bağlayın
        self.pushButton_13.clicked.connect(self.predict_outcome)
    
        # pushButton_10 olayını bağlayın
        self.pushButton_10.clicked.connect(self.apply_normalization)
        
        # pushButton_6 olayını bağlayın
        self.pushButton_6.clicked.connect(self.apply_nan_handling)
        # Veri setini bir değişkene yüklemek için bir tanım ekliyoruz.

        self.pushButton.clicked.connect(self.apply_smote)

        # label_12 ayarları
        self.label_12.setGeometry(QtCore.QRect(300, 360, 200, 200))  # Görseli göstermek için alan ayarlayın
        self.label_12.setText("")  # Varsayılan metni temizleyin

        
        self.data=None

        self.pushButton_8.clicked.connect(self.load_dataset)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_7.setText(_translate("MainWindow", "Model Çalıştırma"))
        self.label_9.setText(_translate("MainWindow", "DiabetesPedigreeFunction "))
        self.pushButton_13.setText(_translate("MainWindow", "tahmin yap"))
        self.label_4.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_14.setText(_translate("MainWindow", "K-fold"))
        self.label_7.setText(_translate("MainWindow", "  Insulin"))
        self.label_12.setText(_translate("MainWindow", "TextLabel"))
        self.label_6.setText(_translate("MainWindow", " SkinThickness"))
        self.pushButton_6.setText(_translate("MainWindow", " Doldur"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.label.setText(_translate("MainWindow", "Pregnancies"))
        self.label_2.setText(_translate("MainWindow", " Glucose"))
        self.label_11.setText(_translate("MainWindow", "TextLabel"))
        self.label_10.setText(_translate("MainWindow", "TextLabel"))
        self.label_14.setText(_translate("MainWindow", "Age"))
        self.label_13.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_9.setText(_translate("MainWindow", "Null %"))
        self.pushButton_10.setText(_translate("MainWindow", " Normalizasyon"))
        self.pushButton.setText(_translate("MainWindow", "Smote"))
        self.label_8.setText(_translate("MainWindow", " BMI"))
        self.pushButton_8.setText(_translate("MainWindow", "Diyabet veri seti"))
        self.label_5.setText(_translate("MainWindow", " BloodPressure"))


    def calculate_metrics(self):
        """Veri seti üzerinde tahmin ve metrik hesaplama."""

        if self.data is None:
            print("Veri seti yüklenmedi!")
            return None, None

        try:
            # Veri setini hedef değişkene (Outcome) göre ayır
            X = self.data.drop(columns=["Outcome"])
            y = self.data["Outcome"]

            # Veri setini eğitim ve test olarak ayır
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

            # Modelleri oluştur
            models = {
                "Random Forest": RandomForestClassifier(random_state=42),
                "KNN": KNeighborsClassifier(),
                "Decision Tree": DecisionTreeClassifier(random_state=42)
            }

            # Model değerlendirme ve en iyi modeli seçme
            best_model = None
            best_accuracy = 0
            best_metrics = {}

            for model_name, model in models.items():
                # Modeli eğit
                model.fit(X_train, y_train)

                # Tahmin yap
                y_pred = model.predict(X_test)
                y_pred_proba = model.predict_proba(X_test)[:, 1]  # Only take the probability of the positive class (Outcome = 1)

                # Metrikleri hesapla
                accuracy = accuracy_score(y_test, y_pred)
                precision = precision_score(y_test, y_pred)
                recall = recall_score(y_test, y_pred)
                f1 = f1_score(y_test, y_pred)
                cm = confusion_matrix(y_test, y_pred)
                tn, fp, fn, tp = cm.ravel()
                specificity = tn / (tn + fp)

                # Print out the predicted probabilities for analysis (optional)
                print(f"Predicted probabilities for {model_name}: {y_pred_proba[:5]}")  # First 5 samples as an example

                # Eğer bu model daha iyi bir accuracy sağlıyorsa, en iyi modeli güncelle
                if accuracy > best_accuracy:
                    best_accuracy = accuracy
                    best_model = model_name
                    best_metrics = {
                        "accuracy": accuracy,
                        "precision": precision,
                        "recall": recall,
                        "f1": f1,
                        "specificity": specificity,
                        "probabilities": y_pred_proba
                    }

                return best_metrics, best_model

        except Exception as e:
            print(f"Metrik hesaplama sırasında bir hata oluştu: {e}")
            return None, None

    def load_dataset(self):
        file_path = r"C:\Users\tugba\OneDrive\Masaüstü\hhhhhhheyyy\diabetes.csv"
        try:
            # CSV dosyasını yükleyin
            self.data = pd.read_csv(file_path, encoding='utf-8')
            print(self.data.head())  # Veri setini kontrol için ilk birkaç satırı yazdırın

            # TableWidget'e veri yükleme
            self.tableWidget.setRowCount(len(self.data))
            self.tableWidget.setColumnCount(len(self.data.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.data.columns)

            for i in range(len(self.data)):
                for j in range(len(self.data.columns)):
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.data.iloc[i, j])))
        except FileNotFoundError:
            print("Veri seti bulunamadı! Lütfen dosya yolunu kontrol edin.")
        except Exception as e:
            print(f"Veri seti yüklenirken bir hata oluştu: {e}")


    def load_datasett(self):
        if self.pushButton.isChecked():  # Check if the button has been clicked
            file_path = r"C:\Users\tugba\OneDrive\Masaüstü\hhhhhhheyyy\diabetes_undersampled.csv"
            try:
                # CSV dosyasını yükleyin
                self.data = pd.read_csv(file_path, encoding='utf-8')
                print(self.data.head())  # Veri setini kontrol için ilk birkaç satırı yazdırın

                # TableWidget'e veri yükleme
                self.tableWidget.setRowCount(len(self.data))
                self.tableWidget.setColumnCount(len(self.data.columns))
                self.tableWidget.setHorizontalHeaderLabels(self.data.columns)

                for i in range(len(self.data)):
                    for j in range(len(self.data.columns)):
                        self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.data.iloc[i, j])))

                
                


                

            except FileNotFoundError:
                print("Veri seti bulunamadı! Lütfen dosya yolunu kontrol edin.")
            except Exception as e:
                print(f"Veri seti yüklenirken bir hata oluştu: {e}")

         
           
            X = self.data.drop(columns=['Outcome'])  # Features
            y = self.data['Outcome']  # Target variable

            # Split data into train and test sets
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # Initialize models
            rf_model = RandomForestClassifier(random_state=42)
            knn_model = KNeighborsClassifier()
            dt_model = DecisionTreeClassifier(random_state=42)

            # Train the models
            rf_model.fit(X_train, y_train)
            knn_model.fit(X_train, y_train)
            dt_model.fit(X_train, y_train)

            # Predict using the models
            rf_pred = rf_model.predict(X_test)
            knn_pred = knn_model.predict(X_test)
            dt_pred = dt_model.predict(X_test)

            # Calculate accuracy scores
            rf_acc = accuracy_score(y_test, rf_pred)
            knn_acc = accuracy_score(y_test, knn_pred)
            dt_acc = accuracy_score(y_test, dt_pred)

            # Display the results in label_12
            self.label_12.setText(f"Random Forest Accuracy: {rf_acc*100:.2f}%\n"
                                  f"KNN Accuracy: {knn_acc*100:.2f}%\n"
                                  f"Decision Tree Accuracy: {dt_acc*100:.2f}%")
             


     
    
    def generate_nan_values(self):
        if self.data is None:
            print("Veri seti yüklenmedi!")
            return

        try:
            # spinBox'tan yüzde değeri al
            percentage = self.spinBox.value()

            # Hedef değişken dışındaki sütunları seç
            columns_to_modify = [col for col in self.data.columns if col != "Outcome"]

            # Belirtilen yüzde kadar rastgele hücre seç ve NaN yap
            for column in columns_to_modify:
                num_rows = len(self.data)
                num_nan = int(num_rows * (percentage / 100))  # NaN yapılacak hücre sayısı
                nan_indices = np.random.choice(self.data.index, num_nan, replace=False)
                self.data.loc[nan_indices, column] = np.nan

            # Güncellenmiş veri setini tableWidget'e yükle
            self.tableWidget.setRowCount(len(self.data))
            self.tableWidget.setColumnCount(len(self.data.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.data.columns)

            for i in range(len(self.data)):
                for j in range(len(self.data.columns)):
                    value = self.data.iloc[i, j]
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem("" if pd.isna(value) else str(value)))
        except Exception as e:
            print(f"NaN değerler oluşturulurken bir hata oluştu: {e}")
    def apply_nan_handling(self):
        if self.data is None:
            print("Veri seti yüklenmedi!")
            return

        try:
            # İlk ve son satırları koruma
            first_row = self.data.iloc[0]
            last_row = self.data.iloc[-1]
            df_middle = self.data.iloc[1:-1]

            # comboBox_5'ten seçilen yöntemi al
            method = self.comboBox_5.currentText()

            # Seçilen yöntemi uygula
            if method == "İleri Doldurma":
                df_middle.fillna(method="ffill", inplace=True)
            elif method == "Geri Doldurma":
                df_middle.fillna(method="bfill", inplace=True)
            elif method == "Ortalama ile Doldurma":
                df_middle.fillna(df_middle.mean(), inplace=True)
            elif method == "Silme ile Doldurma":
                df_middle.dropna(inplace=True)

            # Veri setini birleştir
            if not df_middle.empty:
                self.data = pd.concat([first_row.to_frame().T, df_middle, last_row.to_frame().T], ignore_index=True)

            # TableWidget'i güncelle
            self.update_table_widget()

            # Metrikleri ve karışıklık matrisini hesapla
            metrics, cm = self.calculate_metrics()
            if metrics:
                metrics_text = (
                    f"Accuracy: {metrics['accuracy']:.2f}"
                    f"Precision: {metrics['precision']:.2f}"
                    f"Recall: {metrics['recall']:.2f}"
                    f"F1-Score: {metrics['f1']:.2f}"
                    f"Specificity: {metrics['specificity']:.2f}"
                )
                self.label_13.setText(metrics_text)

                # Karışıklık matrisini yazdır
                print("Karışıklık Matrisi:")
                print(cm)
        except Exception as e:
            print(f"NaN işleme sırasında bir hata oluştu: {e}")  


    def apply_normalization(self):
        if self.data is None:
            print("Veri seti yüklenmedi!")
            return

        try:
            # comboBox_6'dan seçilen yöntemi al
            method = self.comboBox_6.currentText()

            # Hedef değişkeni hariç tut
            features = self.data.drop(columns=["Outcome"])

            # Normalizasyon yöntemine göre işlem yap
            if method == "Min-Max Normalizasyonu":
                normalized_data = (features - features.min()) / (features.max() - features.min())
            elif method == "Z-Score Normalizasyonu":
                normalized_data = (features - features.mean()) / features.std()
            else:
                print("Bilinmeyen bir normalizasyon yöntemi seçildi.")
                return

            # Güncellenmiş veriyi veri setine geri koy
            self.data.update(normalized_data)

            # TableWidget'i güncelle
            self.update_table_widget()

            # Metrikleri ve karışıklık matrisini hesapla
            metrics, cm = self.calculate_metrics()
            if metrics:
                metrics_text = (
                    f"Accuracy: {metrics['accuracy']:.2f}"
                    f"Precision: {metrics['precision']:.2f}"
                    f"Recall: {metrics['recall']:.2f}"
                    f"F1-Score: {metrics['f1']:.2f}"
                    f"Specificity: {metrics['specificity']:.2f}"
                )
                self.label_3.setText(metrics_text)

                 
        except Exception as e:
            print(f"Model uygulama sırasında bir hata oluştu: {e}")

    def apply_model(self):
        if self.data is None:
            print("Veri seti yüklenmedi!")
            return

        try:
            # comboBox_4'ten seçilen modeli al
            model_name = self.comboBox_4.currentText()

            # Veri setini ayır
            X = self.data.drop(columns=["Outcome"])
            y = self.data["Outcome"]
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

            # Seçilen modele göre model oluştur
            if model_name == "KNN":
                model = KNeighborsClassifier(n_neighbors=5)
            elif model_name == "Random Forest":
                model = RandomForestClassifier(random_state=42)
            elif model_name == "Karar Ağacı":
                model = DecisionTreeClassifier(random_state=42)
            else:
                print("Bilinmeyen bir model seçildi.")
                return

            # Modeli eğit ve tahmin yap
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            # Metrikleri hesapla
            accuracy = accuracy_score(y_test, y_pred)
            precision = precision_score(y_test, y_pred)
            recall = recall_score(y_test, y_pred)
            f1 = f1_score(y_test, y_pred)
            cm = confusion_matrix(y_test, y_pred)
            tn, fp, fn, tp = cm.ravel()
            specificity = tn / (tn + fp)

            # Metrikleri label_4 üzerinde göster
            metrics_text = (
                f"Accuracy: {accuracy:.2f}"
                f"Precision: {precision:.2f}"
                f"Recall: {recall:.2f}"
                f"F1-Score: {f1:.2f}"
                f"Specificity: {specificity:.2f}"
            )
            self.label_4.setText(metrics_text)

            # Karışıklık matrisini görselleştir
            plt.figure(figsize=(2.41, 1.81))  # (241, 181) boyutlarına yakın bir oran
            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Negatif", "Pozitif"], yticklabels=["Negatif", "Pozitif"])
            plt.title('Karışıklık Matrisi')
            plt.ylabel('Gerçek Değerler')
            plt.xlabel('Tahmin Edilen Değerler')

            # Resmi geçici bir bayta dönüştür
            img_buf = BytesIO()
            plt.savefig(img_buf, format="png")
            img_buf.seek(0)
            img_data = QByteArray(img_buf.read())

            # Resmi QLabel üzerinde göster
            pixmap = QPixmap()
            pixmap.loadFromData(img_data)
            self.label_11.setPixmap(pixmap)

            # Karışıklık matrisini yazdır
            print("Karışıklık Matrisi:")
            print(cm)

            # Görselleştirmeyi kapat
            plt.close()

        except Exception as e:
            print(f"Model uygulama sırasında bir hata oluştu: {e}")

    def apply_kfold(self):
        if self.data is None:
            self.label_10.setText("Hata: Veri seti yüklenmedi.")
            return

        model_type = self.comboBox_4.currentText()
        if model_type not in ["Karar Ağacı", "KNN", "Random Forest"]:
            self.label_10.setText("Hata: Lütfen geçerli bir model türü seçin.")
            return

        # Veri setini ayır
        try:
            X = self.data.drop(columns=["Outcome"]).select_dtypes(include=[np.number])
            y = self.data["Outcome"]

            if X.empty or y.empty:
                self.label_10.setText("Hata: Veri seti eğitim için uygun değil.")
                return

            # Model seçimi
            if model_type == "Karar Ağacı":
                model = DecisionTreeClassifier()
            elif model_type == "KNN":
                model = KNeighborsClassifier()
            elif model_type == "Random Forest":
                model = RandomForestClassifier()

            # K-Fold Cross Validation
            kfold = KFold(n_splits=5, shuffle=True, random_state=42)
            fold_metrics = []  # Her fold için metrikleri saklamak için liste
            all_confusion_matrices = []  # Her fold için karışıklık matrislerini saklamak için liste

            for fold, (train_index, test_index) in enumerate(kfold.split(X), 1):
                X_train, X_test = X.iloc[train_index], X.iloc[test_index]
                y_train, y_test = y.iloc[train_index], y.iloc[test_index]

                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)

                # Hesaplamalar
                accuracy = accuracy_score(y_test, y_pred)
                recall = recall_score(y_test, y_pred)
                specificity = recall_score(y_test, y_pred, pos_label=0)  # Özgüllük
                f1 = f1_score(y_test, y_pred)

                fold_metrics.append({
                    "fold": fold,
                    "accuracy": accuracy,
                    "recall": recall,
                    "specificity": specificity,
                    "f1": f1
                })

                # Her fold için karışıklık matrisini hesapla
                cm = confusion_matrix(y_test, y_pred)
                all_confusion_matrices.append(cm)

                # Her fold için karışıklık matrisini MessageBox'ta göster
                cm_text = f"Fold {fold} - Karışıklık Matrisi:\n{cm}"
                msg_box_cm = QMessageBox()
                msg_box_cm.setWindowTitle(f"Fold {fold} - Karışıklık Matrisi")
                msg_box_cm.setText(cm_text)
                msg_box_cm.exec_()

            # Metrikleri göstermek için metin oluşturma
            results_text = ""
            for metrics in fold_metrics:
                results_text += (f"Fold {metrics['fold']}:\n"
                                f"Accuracy: {metrics['accuracy']:.2f}\n"
                                f"Recall: {metrics['recall']:.2f}\n"
                                f"Specificity: {metrics['specificity']:.2f}\n"
                                f"F1-Score: {metrics['f1']:.2f}\n\n")

            # Ortalama metrikleri hesaplama
            avg_metrics = {
                "accuracy": np.mean([metrics['accuracy'] for metrics in fold_metrics]),
                "recall": np.mean([metrics['recall'] for metrics in fold_metrics]),
                "specificity": np.mean([metrics['specificity'] for metrics in fold_metrics]),
                "f1": np.mean([metrics['f1'] for metrics in fold_metrics]),
            }

            results_text += (f"Ortalama Accuracy: {avg_metrics['accuracy']:.2f}\n"
                            f"Ortalama Recall: {avg_metrics['recall']:.2f}\n"
                            f"Ortalama Specificity: {avg_metrics['specificity']:.2f}\n"
                            f"Ortalama F1-Score: {avg_metrics['f1']:.2f}\n")

            # Burada label_10'dan mesajları almak yerine, sonuçları QMessageBox'a yazdırıyoruz.
            msg_box = QMessageBox()
            msg_box.setWindowTitle("K-Fold Sonuçları")
            msg_box.setText(results_text)
            msg_box.exec_()

            # Karışıklık matrisini hesapla
            avg_cm = np.mean(all_confusion_matrices, axis=0)
            cm_text = f"Karışıklık Matrisi (ortalama):\n{avg_cm}"

            # Karışıklık Matrisini MessageBox'ta göster
            msg_box_cm = QMessageBox()
            msg_box_cm.setWindowTitle("Karışıklık Matrisi (Ortalama)")
            msg_box_cm.setText(cm_text)
            msg_box_cm.exec_()

        except Exception as e:
            self.label_10.setText(f"Hata: {str(e)}")
    
    def predict_outcome(self):
        try:
            # Girdileri al
            inputs = [
                float(self.lineEdit.text()),
                float(self.lineEdit_2.text()),
                float(self.lineEdit_3.text()),
                float(self.lineEdit_4.text()),
                float(self.lineEdit_5.text()),
                float(self.lineEdit_6.text()),
                float(self.lineEdit_7.text()),
                float(self.lineEdit_8.text())   # Age
            ]

            # Veri setini ayır
            X = self.data.drop(columns=['Outcome'])
            y = self.data['Outcome']
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

            # Modelleri tanımla
            models = {
                'Decision Tree': DecisionTreeClassifier(random_state=42),
                'Random Forest': RandomForestClassifier(random_state=42),
                'KNN': KNeighborsClassifier(n_neighbors=5)
            }

            best_model = None
            best_score = 0

            # Modelleri eğit ve en iyisini bul
            for model_name, model in models.items():
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                accuracy = accuracy_score(y_test, y_pred)

                if accuracy > best_score:
                    best_score = accuracy
                    best_model = model
                    y_pred_best = y_pred  # En iyi modelin tahmin sonuçlarını sakla

            # En iyi model ile tahmin yap
            prediction_proba = best_model.predict_proba([inputs])[0]
            predicted_class = 1 if prediction_proba[1] > 0.5 else 0

            # Karışıklık matrisini ve metrikleri hesapla
            cm = confusion_matrix(y_test, y_pred_best)
            accuracy = accuracy_score(y_test, y_pred_best)
            recall = recall_score(y_test, y_pred_best)
            precision = precision_score(y_test, y_pred_best)
            f1 = f1_score(y_test, y_pred_best)

            # Sonuçları QLabel'e yazdır
            self.label_11.setText(f"Sonuç: {predicted_class}\n"
                                f"Olasılık (0): {prediction_proba[0]:.2f}\n"
                                f"Olasılık (1): {prediction_proba[1]:.2f}\n\n"
                                f"Doğruluk: {accuracy:.2f}\n"
                                f"Recall: {recall:.2f}\n"
                                f"Precision: {precision:.2f}\n"
                                f"F1 Score: {f1:.2f}")

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Tahmin sırasında bir hata oluştu: {e}")

    
        


    def apply_smote(self):
        if self.data is None:
            self.label_10.setText("Error: No dataset loaded.")
            return

        # Özellikler ve hedef değişkeni ayırma
        X = self.data.drop(columns=["Outcome"]).select_dtypes(include=[np.number])
        y = self.data["Outcome"]

        # RandomUnderSampler ile azınlık sınıfını azaltma
        under_sampler = RandomUnderSampler(sampling_strategy={0: 500, 1: 100}, random_state=42)  # Azınlık sınıfını %20'ye kadar azaltıyoruz
        X_resampled, y_resampled = under_sampler.fit_resample(X, y)

        # Yeni dengesizleştirilmiş veri setini oluşturma
        self.data_resampled = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), 
                                        pd.DataFrame(y_resampled, columns=["Outcome"])], axis=1)

        # Yeni sınıf dağılımını yazdırma
        class_counts = y_resampled.value_counts()
        self.label.setText(f"Yeni sınıf dağılımı:\n{class_counts}")

        # Yeni sınıf dağılımını görselleştir
        self.show_class_distribution()

        # Metrikleri ve karışıklık matrisini hesapla
        metrics, cm = self.calculate_metrics()
        if metrics:
            metrics_text = (
                f"Accuracy: {metrics['accuracy']:.2f}\n"
                f"Precision: {metrics['precision']:.2f}\n"
                f"Recall: {metrics['recall']:.2f}\n"
                f"F1-Score: {metrics['f1']:.2f}\n"
                f"Specificity: {metrics['specificity']:.2f}"
            )
            self.label_12.setText(metrics_text)

        # Yeni veriyi tabloya kaydetme
        self.save_resampled_data_to_table()

        # Yeni veriyi load_datasett fonksiyonu ile yükle
        self.load_datasett()  # This calls the load_datasett function to update the table with the resampled data


    def show_class_distribution(self):
        """Sınıf dağılımını görselleştirir"""
        if self.data_resampled is None:  
            self.label.setText("Lütfen veri setini örnekleyin.")
            return

        # Sınıf dağılımını hesapla
        class_distribution = self.data_resampled['Outcome'].value_counts()

        # MATLAB benzeri grafik penceresi aç
        plt.figure(figsize=(6, 4))
        class_distribution.plot(kind='bar', color=['skyblue', 'salmon'], edgecolor='black')

        # Grafik başlığı ve etiketler
        plt.title('Outcome Sınıf Dağılımı')
        plt.xlabel('Outcome (Sınıf)')
        plt.ylabel('Örnek Sayısı')

        # MATLAB tarzı pencere açarak göster
        plt.tight_layout()
        plt.show()  # MATLAB tarzı grafik gösterimi

    def update_table_widget(self):
        """TableWidget'i günceller."""
        if self.data is not None:
            self.tableWidget.setRowCount(len(self.data))
            self.tableWidget.setColumnCount(len(self.data.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.data.columns)

            for i in range(len(self.data)):
                  for j in range(len(self.data.columns)):
                    value = self.data.iloc[i, j]
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem("" if pd.isna(value) else str(value)))

    def save_resampled_data_to_table(self):
        """SMOTE sonrası verileri tabloya kaydeder."""
        if self.data_resampled is not None:
            self.tableWidget.clearContents()
            self.tableWidget.setRowCount(len(self.data_resampled))
            self.tableWidget.setColumnCount(len(self.data_resampled.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.data_resampled.columns)

            # Tablodaki verileri güncelleme
            for i in range(len(self.data_resampled)):
                for j in range(len(self.data_resampled.columns)):
                    value = self.data_resampled.iloc[i, j]
                    
                    # NaN kontrolü eklendi
                    if pd.isna(value):
                        value = ""  # Eğer değer boşsa, tabloya boş string ekle
                    else:
                        value = str(value)

                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(value))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
